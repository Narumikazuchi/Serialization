<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Narumikazuchi.Serialization</name>
    </assembly>
    <members>
        <member name="T:Narumikazuchi.Serialization.CustomSerializableAttribute">
            <summary>
            Marks a type as serializable for <see cref="T:Narumikazuchi.Serialization.IDeclaredSerializer"/>.
            </summary>
            <remarks>
            All properties and fields that are not marked with the <see cref="T:Narumikazuchi.Serialization.NotSerializedAttribute"/> will get serialized. The only exception to this are indexers, as they are as of right now to complex a task to tackle.
            </remarks>
        </member>
        <member name="T:Narumikazuchi.Serialization.ISerializable">
            <summary>
            Represents an object that can be serialized.
            </summary>
            <remarks>
            If you plan to also deserialize a type your should use <see cref="T:Narumikazuchi.Serialization.ISerializable`1"/> instead, since this interface does not implement a way to deserialize.<para/>
            If you write a serializer for types that implement this interface, consider using <see langword="lock"/> on the object during the serialization process to prevent changes from other threads until the state retrieval finishes.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializable.GetSerializationData(Narumikazuchi.Serialization.SerializationInfo)">
            <summary>
            Retrieves the state of this object for serialization.
            </summary>
            <param name="info">The object, which will hold the information to serialize.</param>
        </member>
        <member name="T:Narumikazuchi.Serialization.ISerializable`1">
            <summary>
            Represents an object that can be serialized and deserialized.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializable`1.ConstructFromSerializationData(Narumikazuchi.Serialization.SerializationInfo)">
            <summary>
            Constructs an object of type <typeparamref name="TSelf"/> from the corresponding serialization data.
            </summary>
            <param name="info">The object, which holds the deserialized information.</param>
            <returns>The object of type <typeparamref name="TSelf"/> containing the state that is stored in the serialization data</returns>
        </member>
        <member name="T:Narumikazuchi.Serialization.ISerializationStrategy`1">
            <summary>
            Represents a strategy on how to serialize an object into an object of type <typeparamref name="TReturn"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializationStrategy`1.Serialize(System.Object)">
            <summary>
            Serializes the specified object into another object of type <typeparamref name="TReturn"/>, which represents the state of the object at the time of method invocation.
            </summary>
            <param name="input">The object to serialize.</param>
            <returns>An object of type <typeparamref name="TReturn"/> representing the state of the input object at the time of method invocation.</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializationStrategy`1.Deserialize(`0)">
            <summary>
            Deserializes the specified object into it's original type and state.
            </summary>
            <param name="input">The object to deserialize.</param>
            <returns>The represented objects original state.</returns>
        </member>
        <member name="T:Narumikazuchi.Serialization.ISerializationStrategy`2">
            <summary>
            Represents a strategy on how to serialize an object of type <typeparamref name="TInput"/> into an object of type <typeparamref name="TReturn"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializationStrategy`2.Serialize(`1)">
            <summary>
            Serializes the specified object of type <typeparamref name="TInput"/> into another object of type <typeparamref name="TReturn"/>, which represents the state of the object at the time of method invocation.
            </summary>
            <param name="input">The object to serialize.</param>
            <returns>An object of type <typeparamref name="TReturn"/> representing the state of the input object at the time of method invocation.</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializationStrategy`2.Deserialize(`0)">
            <summary>
            Deserializes the specified object into it's original type <typeparamref name="TInput"/> and state.
            </summary>
            <param name="input">The object to deserialize.</param>
            <returns>The represented objects original state.</returns>
        </member>
        <member name="T:Narumikazuchi.Serialization.MemberState">
            <summary>
            Contains the information on a specific member of an object.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.MemberState.As``1">
            <summary>
            Returns the value of this member as the specified type <typeparamref name="TReturn"/>.
            </summary>
            <returns>The value of this member as the specified type <typeparamref name="TReturn"/></returns>
        </member>
        <member name="P:Narumikazuchi.Serialization.MemberState.Name">
            <summary>
            Gets the name of this member in the object.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Serialization.MemberState.Value">
            <summary>
            Gets the value of this member in the object.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Serialization.MemberState.MemberType">
            <summary>
            Gets the member type.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Serialization.NotSerializedAttribute">
            <summary>
            Indicates that this member shall not be serialized.
            </summary>
            <remarks>
            Indexers are currently not supported and won't be serialized either way.
            </remarks>
        </member>
        <member name="T:Narumikazuchi.Serialization.SerializationFinishAction">
            <summary>
            Represents the actions a serializer takes after finishing a serialization operation.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Serialization.SerializationInfo">
            <summary>
            Contains the current state information of an object that should be serialized.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.SerializationInfo.Create(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Narumikazuchi.Serialization.SerializationInfo"/> class from the information provided by the specified object.
            </summary>
            <param name="from">The object to serialize.</param>
            <returns>The current state information of the specified object.</returns>
            <exception cref="T:System.NotSupportedException"/>
            <remarks>
            This method only works for types that are marked with the <see cref="T:Narumikazuchi.Serialization.CustomSerializableAttribute"/>.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Serialization.SerializationInfo.Create``1(``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo})">
            <summary>
            Creates a new instance of the <see cref="T:Narumikazuchi.Serialization.SerializationInfo"/> class from the information provided by the specified object.
            </summary>
            <param name="from">The object to serialize.</param>
            <param name="write">The <see langword="delegate"/> which provides the state for the object.</param>
            <returns>The current state information of the specified object.</returns>
            <remarks>
            This method is designed for types that are neither marked with the <see cref="T:Narumikazuchi.Serialization.CustomSerializableAttribute"/> nor implement the <see cref="T:Narumikazuchi.Serialization.ISerializable`1"/> interface.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Serialization.SerializationInfo.Create(Narumikazuchi.Serialization.ISerializable)">
            <summary>
            Creates a new instance of the <see cref="T:Narumikazuchi.Serialization.SerializationInfo"/> class from the information provided by the specified object.
            </summary>
            <param name="from">The object to serialize.</param>
            <returns>The current state information of the specified object.</returns>
            <remarks>
            This method is designed for types that implement the <see cref="T:Narumikazuchi.Serialization.ISerializable"/> interface.
            </remarks>
        </member>
        <member name="M:Narumikazuchi.Serialization.SerializationInfo.Create(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Narumikazuchi.Serialization.SerializationInfo"/> class for the specified type.
            </summary>
            <param name="type">The type of the object being deserialized.</param>
            <returns>An empty state object to be filled by the serializer.</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.SerializationInfo.CreateNull">
            <summary>
            Creates a new instance of the <see cref="T:Narumikazuchi.Serialization.SerializationInfo"/> class for an object withou a reference.
            </summary>
            <returns>An empty state object representing the special state of <see langword="null"/>.</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.SerializationInfo.Add``1(System.String,``0)">
            <summary>
            Adds the specified member to the current state information.
            </summary>
            <param name="memberName">The name of the member in the object.</param>
            <param name="memberValue">The current value of the member.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Narumikazuchi.Serialization.SerializationInfo.Get``1(System.String)">
            <summary>
            Gets the specified member from the state information.
            </summary>
            <param name="memberName">The name of the member in the object.</param>
            <returns>The value of the specified member</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"/>
        </member>
        <member name="P:Narumikazuchi.Serialization.SerializationInfo.IsNull">
            <summary>
            Gets if this state represents <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Serialization.SerializationInfo.Members">
            <summary>
            Gets the members that are stored in this information object.
            </summary>
        </member>
        <member name="P:Narumikazuchi.Serialization.SerializationInfo.Type">
            <summary>
            Gets the type of the serialization target.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.SerializationInfo.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Narumikazuchi.Serialization.SerializationInfo.Count">
            <inheritdoc/>
        </member>
        <member name="T:Narumikazuchi.Serialization.IBothWaySerializer`1">
            <summary>
            Represents a serializer for classes that implement the <see cref="T:Narumikazuchi.Serialization.ISerializable`1"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Serialize(System.IO.Stream,`0)">
            <summary>
            Serializes the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Serialize(System.IO.Stream,`0,System.Int64@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Serialize(System.IO.Stream,`0,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Serialize(System.IO.Stream,`0,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TrySerialize(System.IO.Stream,`0)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TrySerialize(System.IO.Stream,`0,System.Int64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TrySerialize(System.IO.Stream,`0,System.UInt64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="written">The amount of bytes written.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TrySerialize(System.IO.Stream,`0,System.Int64@,System.UInt64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="written">The amount of bytes written.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TrySerialize(System.IO.Stream,`0,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TrySerialize(System.IO.Stream,`0,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TrySerialize(System.IO.Stream,`0,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TrySerialize(System.IO.Stream,`0,System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Deserialize(System.IO.Stream,System.UInt64@)">
            <summary>
            Deserializes the specified bytes starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <returns>The instance represented by the specified bytes starting at the specified offset</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Deserialize(System.IO.Stream,System.Int64@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Deserialize(System.IO.Stream,System.Int64@,System.UInt64@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Deserialize(System.IO.Stream,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Deserialize(System.IO.Stream,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Deserialize(System.IO.Stream,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.Deserialize(System.IO.Stream,System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TryDeserialize(System.IO.Stream,`0@)">
            <summary>
            Tries to deserialize the specified stream into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TryDeserialize(System.IO.Stream,System.Int64@,`0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TryDeserialize(System.IO.Stream,System.UInt64@,`0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TryDeserialize(System.IO.Stream,System.Int64@,System.UInt64@,`0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TryDeserialize(System.IO.Stream,Narumikazuchi.Serialization.SerializationFinishAction@,`0@)">
            <summary>
            Tries to deserialize the specified stream into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TryDeserialize(System.IO.Stream,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@,`0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TryDeserialize(System.IO.Stream,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@,`0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IBothWaySerializer`1.TryDeserialize(System.IO.Stream,System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@,`0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TSerializable"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="T:Narumikazuchi.Serialization.IDeclaredSerializer">
            <summary>
            Represents a serializer for classes that implement the <see cref="T:Narumikazuchi.Serialization.ISerializable"/> interface.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.Serialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable)">
            <summary>
            Serializes the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.Serialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,System.Int64@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.Serialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.Serialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.TrySerialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.TrySerialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,System.Int64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.TrySerialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,System.UInt64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="written">The amount of bytes written.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.TrySerialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,System.Int64@,System.UInt64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="written">The amount of bytes written.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.TrySerialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.TrySerialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.TrySerialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IDeclaredSerializer.TrySerialize(System.IO.Stream,Narumikazuchi.Serialization.ISerializable,System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="T:Narumikazuchi.Serialization.IObjectSerializer">
            <summary>
            Represents a serializer for classes that are marked with the <see cref="T:Narumikazuchi.Serialization.CustomSerializableAttribute"/>.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Serialize(System.IO.Stream,System.Object,System.Int64@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Serialize(System.IO.Stream,System.Object,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Serialize(System.IO.Stream,System.Object,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TrySerialize(System.IO.Stream,System.Object,System.Int64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TrySerialize(System.IO.Stream,System.Object,System.UInt64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="written">The amount of bytes written.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TrySerialize(System.IO.Stream,System.Object,System.Int64@,System.UInt64@)">
            <summary>
            Tries to serialize the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="written">The amount of bytes written.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TrySerialize(System.IO.Stream,System.Object,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TrySerialize(System.IO.Stream,System.Object,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TrySerialize(System.IO.Stream,System.Object,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TrySerialize(System.IO.Stream,System.Object,System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Tries to serialize the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Deserialize(System.IO.Stream,System.UInt64@)">
            <summary>
            Deserializes the specified bytes starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <returns>The instance represented by the specified bytes starting at the specified offset</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Deserialize(System.IO.Stream,System.Int64@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Deserialize(System.IO.Stream,System.Int64@,System.UInt64@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Deserialize(System.IO.Stream,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Deserialize(System.IO.Stream,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Deserialize(System.IO.Stream,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.Deserialize(System.IO.Stream,System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TryDeserialize(System.IO.Stream,System.Int64@,System.Object@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TryDeserialize(System.IO.Stream,System.UInt64@,System.Object@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TryDeserialize(System.IO.Stream,System.Int64@,System.UInt64@,System.Object@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TryDeserialize(System.IO.Stream,Narumikazuchi.Serialization.SerializationFinishAction@,System.Object@)">
            <summary>
            Tries to deserialize the specified stream into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TryDeserialize(System.IO.Stream,System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@,System.Object@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TryDeserialize(System.IO.Stream,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@,System.Object@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IObjectSerializer.TryDeserialize(System.IO.Stream,System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@,System.Object@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="T:Narumikazuchi.Serialization.ISerializer">
            <summary>
            Represents the basic frame for a serializer.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializer.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializer.TrySerialize(System.IO.Stream,System.Object)">
            <summary>
            Tries to serialize the specified graph into the specified stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the specified stream into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.ISerializer.TryDeserialize(System.IO.Stream,System.Object@)">
            <summary>
            Tries to deserialize the specified stream into an instance of it's type.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="P:Narumikazuchi.Serialization.ISerializer.RegisteredStrategies">
            <summary>
            Gets the types for which a <see cref="T:Narumikazuchi.Serialization.ISerializationStrategy`1"/> is registered for this serializer.
            </summary>
        </member>
        <member name="T:Narumikazuchi.Serialization.IUnboundSerializer">
            <summary>
            Represents a serializer for classes that you have no access to. 
            It allows you to provide delegates to write and read the state instead of relying on an attribute or an interface implementation.
            </summary>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Serialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo})">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Serialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},System.Int64@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Serialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Serialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TrySerialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo})">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TrySerialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},System.Int64@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TrySerialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},System.UInt64@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TrySerialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},System.Int64@,System.UInt64@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TrySerialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TrySerialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TrySerialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TrySerialize``1(System.IO.Stream,``0,System.Action{``0,Narumikazuchi.Serialization.SerializationInfo},System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Serializes the specified graph into the specified stream starting at the specified offset in the stream.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The graph to serialize.</param>
            <param name="offset">The offset in the stream where to begin writing.</param>
            <param name="written">The amount of bytes written.</param>
            <param name="getSerializationData">The <see langword="delegate"/> which specifies the members to serialize.</param>
            <param name="actionAfter">The actions to perform after the writing operation has finished.</param>
            <returns>The amount of bytes written</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Deserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0})">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Deserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.Int64@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Deserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.UInt64@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Deserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.Int64@,System.UInt64@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Deserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Deserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Deserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.Deserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@)">
            <summary>
            Deserializes the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <returns>The instance represented by the bytes in the specified stream</returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TryDeserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},``0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TryDeserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.Int64@,``0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TryDeserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.UInt64@,``0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TryDeserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.Int64@,System.UInt64@,``0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TryDeserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},Narumikazuchi.Serialization.SerializationFinishAction@,``0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TryDeserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.Int64@,Narumikazuchi.Serialization.SerializationFinishAction@,``0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TryDeserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@,``0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
        <member name="M:Narumikazuchi.Serialization.IUnboundSerializer.TryDeserialize``1(System.IO.Stream,System.Func{Narumikazuchi.Serialization.SerializationInfo,``0},System.Int64@,System.UInt64@,Narumikazuchi.Serialization.SerializationFinishAction@,``0@)">
            <summary>
            Tries to deserialize the specified stream starting at the specified offset into an instance of type <typeparamref name="TAny"/>.
            </summary>
            <param name="stream">The stream to deserialize the graph from.</param>
            <param name="constructFromSerializationData">The <see langword="delegate"/> which specifies how to deserialize the state into an object.</param>
            <param name="offset">The offset in the stream where to begin reading.</param>
            <param name="read">The amount of elements read from the <paramref name="stream"/> parameter.</param>
            <param name="actionAfter">The actions to perform after the reading operation has finished.</param>
            <param name="result">The instance represented by the bytes in the specified stream.</param>
            <returns><see langword="true"/> if the serialization succeeded; else, <see langword="false"/></returns>
        </member>
    </members>
</doc>
